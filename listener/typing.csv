\bone\b	1
\btwo\b	2
\bthree\b	3
\bfour\b	4
\bfive\b	5
\bsix\b	6
\bseven\b	7
\beight\b	8
\bnine\b	9
\bzero\b	0
[ ]*\|bar[ ]*	|
[ ]*\~tilde[ ]*	~
[ ]*\^caret[ ]*	^
[ ]*\<less\-than[ ]*	<
[ ]*\>greater\-than[ ]*	>
\=equals	=
\=\=equals\-equals	==
\=\=equal\-equal	==
\!\=not\-equals	!=
\!\=not\-equal	!=
\{open\-brace[ ]*	{
[ ]*\}close\-brace	}
[ ]*\}close\-brace	}
[ ]*\@at[ ]*	@
[ ]*\"\"\"triple\-quote[ ]*	"""
[ ]*\"\"\"triple\-double\-quote[ ]*	"""
[ ]*\'\'\'triple\-single\-quote[ ]*	'''
[ ]*\"double\-quote[ ]*	"
[ ]*\'single\-quote[ ]*	'
[ ]*\"quote[ ]*	"
[ ]*\*\*asterisk\-asterisk[ ]*	**
[ ]*\*asterisk[ ]*	*
[ ]*\*\*star\-star[ ]*	**
[ ]*\*star[ ]*	*
[ ]*\$dollar\-sign[ ]*	$
[ ]*\_under\-score[ ]*	_
[ ]*[_]under[ ]*	_
\[left\-bracket[ ]*	[
[ ]*\]right\-bracket	]
\[open\-bracket[ ]*	[
[ ]*\]close\-bracket	]
[ ]*\]close\-bracket	]
[ ]*\\back\-slash[ ]*	\\
[ ]*\`back\-tick[ ]*	`
[ ]*\+plus[ ]*	+
[ ]*\-minus[ ]*	-
\(open\-paren[ ]*	(
\(open\-paren[ ]*	(
[ ]*\)close\-paren	)
\b\_\_dunder\b	__
[ ]*\!exclamation\-point[ ]*	!
[ ]*\"close\-quote[ ]*	"
[ ]*\"double\-quote[ ]*	"
[ ]*\"end\-of\-quote[ ]*	"
[ ]*\"end\-quote[ ]*	"
[ ]*\"quote[ ]*	"
[ ]*\"unquote[ ]*	"
[ ]*\#sharp\-sign[ ]*	#
[ ]*\%percent[ ]*	%
[ ]*\&ampersand[ ]*	&
[ ]*\'end\-inner\-quote[ ]*	'
[ ]*\'end\-quote	'
[ ]*\'inner\-quote[ ]*	'
[ ]*\'quote[ ]*	'
[ ]*\'single\-quote[ ]*	'
\(begin\-parens[ ]*	(
\(in\-parentheses[ ]*	(
\(left\-paren[ ]*	(
\(open\-parentheses[ ]*	(
\(paren[ ]*	(
\(parens[ ]*	(
\(parentheses[ ]*	(
[ ]*\)close\-paren	)
[ ]*\)close\-parentheses	)
[ ]*\)end\-paren	)
[ ]*\)end\-parens	)
[ ]*\)end\-parentheses	)
[ ]*\)end\-the\-paren	)
[ ]*\)paren	)
[ ]*\)parens	)
[ ]*\)right\-paren	)
[ ]*\)right\-paren	)
[ ]*\)un\-parentheses	)
[ ]*\,comma	,
[ ]*\-dash[ ]*	-
[ ]*\-hyphen[ ]*	-
[ ]*\.\.\.ellipsis[ ]*	...
[ ]*\.decimal[ ]*	.
[ ]*\.dot[ ]*	.
[ ]*\.point[ ]*	.
[ ]*\/slash[ ]*	/
[ ]*\:colon	::
[ ]*\;semi\-colon	;
[ ]*\;semi\-colon	;
[ ]*\?question\-mark	?
[ ]*new[ -]+line[ ]*	:listener.interpreter.new_line
[ ]*tab[ -]+key[ ]*	:listener.interpreter.tab_key
[ ]*back[ -]+space[ ]*	:listener.interpreter.backspace
\{brace[ ]*	{
\{left\-brace[ ]*	{
\{open\-brace[ ]*	{
[ ]*\}close\-brace	}
[ ]*\}right\-brace	}
\b[0123456789.*]([ ]+[0123456789.*])+	:listener.interpreter.collapse_spaces
\b0[xX]([0123456789a-fA-F]([ ]*))+	:listener.interpreter.collapse_spaces
([])}])[ ]*([[({])	\1\2
([(])[ ]*([(])	\1\2
([)])[ ]*([)])	\1\2
([(])[ ]*([)])	\1\2
\ball[ ]+cap([s])?[ ]+(?P<next>[^][`~!@#$%^&*()=+{}\\|:;'",./?]+)	:listener.interpreter.all_caps
\bcamel[ ]+cap([s])?[ ]+(?P<next>[^][`~!@#$%^&*()=+{}\\|:;'",./?]+)	:listener.interpreter.cap_camel
\bcap[ ]+camel[ ]+(?P<next>[^][`~!@#$%^&*()=+{}\\|:;'",./?]+)	:listener.interpreter.cap_camel
(?!\bcap[ ]+)\bcamel[ ]+(?!cap)(?P<next>[^][`~!@#$%^&*()=+{}\\|:;'",./?]+)	:listener.interpreter.camel
\bcap[ ]+(?P<next>[^ ]+)	:listener.interpreter.caps
\btitle[ ]+(?P<next>[^ ]+)	:listener.interpreter.caps
[ ]*(?P<this>\.)?full[ -]stop([ ]+(?P<next>[^ ]+))?	:listener.interpreter.full_stop
[ ]*(?P<this>\.)?period([ ]+(?P<next>[^ ]+))?	:listener.interpreter.full_stop
[ ]*(?P<this>\.)?full[ -]*stop([ ]+(?P<next>[^ ]+))?	:listener.interpreter.full_stop
[ ]*no[- ]space[ ]*	
[ ]*space[- ]bar[ ]*	 
[ ]*space[ ]*	 
\b\_\_[ ]+(?P<next>[^ ]+)[ ]+\_\_\b	:listener.interpreter.dunder_wrap
\b(?P<prefix>class[ ]+[^ ]+)[ ]+(?P<suffix>[(])	\g<prefix>\g<suffix>
\b(?P<prefix>def[ ]+[^ ]+)[ ]+(?P<suffix>[(])	\g<prefix>\g<suffix>
